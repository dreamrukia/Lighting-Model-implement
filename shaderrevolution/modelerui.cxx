// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "modelerui.h"

void ModelerUserInterface::cb_m_controlsWindow_i(Fl_Double_Window* o, void*) {
  ModelerUserInterface* pUI = (ModelerUserInterface*)(o->user_data());
	if(Fl::e_number == FL_CLOSE) {
		pUI->m_controlsWindow->hide();
		pUI->m_modelerWindow->hide();
	};
}
void ModelerUserInterface::cb_m_controlsWindow(Fl_Double_Window* o, void* v) {
  ((ModelerUserInterface*)(o->user_data()))->cb_m_controlsWindow_i(o,v);
}

void ModelerUserInterface::cb_Save_i(Fl_Menu_*, void*) {
  const char *filename = fileDialog(Fl_Native_File_Chooser::BROWSE_SAVE_FILE,
				"RAY File (*.ray)\t*.ray",
				"Save Raytracer File");
	
	if(!filename)
		return;
	
	if(openRayFile(filename) == false) {
		fl_alert("Error opening file.");
	}
	else {
		m_modelerView->draw();
		closeRayFile();
	};
}
void ModelerUserInterface::cb_Save(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void ModelerUserInterface::cb_Save1_i(Fl_Menu_*, void*) {
  const char* filename = fileDialog(Fl_Native_File_Chooser::BROWSE_SAVE_FILE,
				"PNG Image File (*.png)\t*.png\nJPEG Image File (*.jpg)\t*.jpg",
				"Save Image");
	
	if(!filename)
		return;
	
	int x = m_modelerView->x();
	int y = m_modelerView->y();
	int w = m_modelerView->w();
	int h = m_modelerView->h();
	
	m_modelerWindow->show();
	m_modelerView->make_current();
	m_modelerView->draw();
		
	unsigned char *imageBuffer = new unsigned char[3*w*h];
	
	// Tell openGL to read from the front buffer when capturing
	// out paint strokes
	glReadBuffer(GL_BACK);
	
	glPixelStorei( GL_PACK_ALIGNMENT, 1 );
	glPixelStorei( GL_PACK_ROW_LENGTH, w );
	glReadPixels( 0, 0, w, h, 
		GL_RGB, GL_UNSIGNED_BYTE,
		imageBuffer );
	
	std::string strFileName = filename;
	int fileType = m_nativeChooser->filter_value();	//0: PNG, 1: JPG
#ifdef SAMPLE_SOLUTION
	//maybe add something to tack on the right file extension if the user didn't use an appropriate filename for this image type
#endif
	
	int quality = 95;
	if(fileType == 1) {
		Dialog2 x(0,0,0,0,"ok");
		quality = x.getValue();
	}
	
	save(filename, imageBuffer, w, h, fileType == 0 ? ".png" : ".jpg", quality);
	
	delete [] imageBuffer;
}
void ModelerUserInterface::cb_Save1(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void ModelerUserInterface::cb_Open_i(Fl_Menu_*, void*) {
  const char *filename = fileDialog(Fl_Native_File_Chooser::BROWSE_FILE,
				"Position File (*.pos)\t*.pos",
				"Open Position File");
	
	if(!filename)
		return;
	
	std::ifstream ifs( filename );
	if( !ifs ) {
		std::cerr << "Error: couldn't read position file " << filename << std::endl;
		return;
	}
	
	float elevation, azimuth, dolly, twist, x, y, z;
	ifs >> elevation >> azimuth >> dolly >> twist >> x >> y >> z;
	
	m_modelerView->m_camera->setElevation( elevation);
	m_modelerView->m_camera->setAzimuth( azimuth );
	m_modelerView->m_camera->setDolly( dolly );
	m_modelerView->m_camera->setTwist( twist );
	m_modelerView->m_camera->setLookAt( Vec3f(x, y, z) );
	
	unsigned int controlNum; 
	float value;
	while( ifs >> controlNum >> value ) {
		if( controlNum >= ModelerApplication::Instance()->GetNumControls() ) {
			break;
		}
		
		ModelerApplication::Instance()->SetControlValue(controlNum, value);
	}
	
	m_modelerView->redraw();
}
void ModelerUserInterface::cb_Open(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

void ModelerUserInterface::cb_Save2_i(Fl_Menu_*, void*) {
  const char *filename = fileDialog(Fl_Native_File_Chooser::BROWSE_SAVE_FILE,
				"Position File (*.pos)\t*.pos",
				"Save Position File");
	
	if(!filename)
		return;
	
	FILE* posFile = NULL;
	fopen_s(&posFile, filename, "w");
	if(!posFile) {
		fl_alert("Save failed!");
		return;
	}
	
	float elevation, azimuth, dolly, twist;
	Vec3f lookAt;
	elevation = m_modelerView->m_camera->getElevation();
	dolly = m_modelerView->m_camera->getDolly();
	azimuth = m_modelerView->m_camera->getAzimuth();
	twist = m_modelerView->m_camera->getTwist();
	lookAt = m_modelerView->m_camera->getLookAt();
	
	fprintf(posFile, "%f %f %f %f %f %f %f\n", elevation, azimuth, dolly, twist, lookAt[0], lookAt[1], lookAt[2]);
	
	double value;
	for(unsigned int i = 0; i < ModelerApplication::Instance()->GetNumControls(); i++) {
		value = ModelerApplication::Instance()->GetControlValue(i);
		
		fprintf(posFile, "%d %f\n", i, value);
	}
	
	fclose(posFile);
}
void ModelerUserInterface::cb_Save2(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Save2_i(o,v);
}

void ModelerUserInterface::cb_Exit_i(Fl_Menu_*, void*) {
  m_controlsWindow->hide();
m_modelerWindow->hide();
}
void ModelerUserInterface::cb_Exit(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

void ModelerUserInterface::cb_Normal_i(Fl_Menu_*, void*) {
  setDrawMode(NORMAL);
m_modelerView->redraw();
}
void ModelerUserInterface::cb_Normal(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Normal_i(o,v);
}

void ModelerUserInterface::cb_Flat_i(Fl_Menu_*, void*) {
  setDrawMode(FLATSHADE);
m_modelerView->redraw();
}
void ModelerUserInterface::cb_Flat(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Flat_i(o,v);
}

void ModelerUserInterface::cb_Wireframe_i(Fl_Menu_*, void*) {
  setDrawMode(WIREFRAME);
m_modelerView->redraw();
}
void ModelerUserInterface::cb_Wireframe(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Wireframe_i(o,v);
}

void ModelerUserInterface::cb_High_i(Fl_Menu_*, void*) {
  setQuality(HIGH);
m_modelerView->redraw();
}
void ModelerUserInterface::cb_High(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_High_i(o,v);
}

void ModelerUserInterface::cb_Medium_i(Fl_Menu_*, void*) {
  setQuality(MEDIUM);
m_modelerView->redraw();
}
void ModelerUserInterface::cb_Medium(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Medium_i(o,v);
}

void ModelerUserInterface::cb_Low_i(Fl_Menu_*, void*) {
  setQuality(LOW);
m_modelerView->redraw();
}
void ModelerUserInterface::cb_Low(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Low_i(o,v);
}

void ModelerUserInterface::cb_Poor_i(Fl_Menu_*, void*) {
  setQuality(POOR);
m_modelerView->redraw();
}
void ModelerUserInterface::cb_Poor(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_Poor_i(o,v);
}

void ModelerUserInterface::cb_m_controlsAnimOnMenu_i(Fl_Menu_*, void*) {
  ModelerApplication::Instance()->m_animating = (m_controlsAnimOnMenu->value() == 0) ? false : true;
}
void ModelerUserInterface::cb_m_controlsAnimOnMenu(Fl_Menu_* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_m_controlsAnimOnMenu_i(o,v);
}

Fl_Menu_Item ModelerUserInterface::menu_m_controlsMenuBar[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Raytracer File", 0,  (Fl_Callback*)ModelerUserInterface::cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Image", 0,  (Fl_Callback*)ModelerUserInterface::cb_Save1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open Position File", 0,  (Fl_Callback*)ModelerUserInterface::cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Position File", 0,  (Fl_Callback*)ModelerUserInterface::cb_Save2, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0,  (Fl_Callback*)ModelerUserInterface::cb_Exit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"View", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Normal", 0,  (Fl_Callback*)ModelerUserInterface::cb_Normal, 0, 12, FL_NORMAL_LABEL, 0, 14, 0},
 {"Flat Shaded", 0,  (Fl_Callback*)ModelerUserInterface::cb_Flat, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Wireframe", 0,  (Fl_Callback*)ModelerUserInterface::cb_Wireframe, 0, 136, FL_NORMAL_LABEL, 0, 14, 0},
 {"High Quality", 0,  (Fl_Callback*)ModelerUserInterface::cb_High, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Medium Quality", 0,  (Fl_Callback*)ModelerUserInterface::cb_Medium, 0, 12, FL_NORMAL_LABEL, 0, 14, 0},
 {"Low Quality", 0,  (Fl_Callback*)ModelerUserInterface::cb_Low, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Poor Quality", 0,  (Fl_Callback*)ModelerUserInterface::cb_Poor, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Animate", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Enable", 0,  (Fl_Callback*)ModelerUserInterface::cb_m_controlsAnimOnMenu, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* ModelerUserInterface::m_controlsAnimOnMenu = ModelerUserInterface::menu_m_controlsMenuBar + 17;

void ModelerUserInterface::cb_m_controlsBrowser_i(Fl_Browser*, void*) {
  for (int i=0; i<ModelerApplication::Instance()->m_numControls; i++) {
	if (m_controlsBrowser->selected(i+1))
		ModelerApplication::Instance()->ShowControl(i);
	else
		ModelerApplication::Instance()->HideControl(i);
};
}
void ModelerUserInterface::cb_m_controlsBrowser(Fl_Browser* o, void* v) {
  ((ModelerUserInterface*)(o->parent()->user_data()))->cb_m_controlsBrowser_i(o,v);
}

void ModelerUserInterface::cb_m_modelerWindow_i(Fl_Double_Window* o, void*) {
  ModelerUserInterface* pUI = (ModelerUserInterface*)(o->user_data());
	if(Fl::e_number == FL_CLOSE) {
		pUI->m_controlsWindow->hide();
		pUI->m_modelerWindow->hide();
	};
}
void ModelerUserInterface::cb_m_modelerWindow(Fl_Double_Window* o, void* v) {
  ((ModelerUserInterface*)(o->user_data()))->cb_m_modelerWindow_i(o,v);
}

ModelerUserInterface::ModelerUserInterface() {
  { m_controlsWindow = new Fl_Double_Window(395, 326, "CSE457 Modeler");
    m_controlsWindow->callback((Fl_Callback*)cb_m_controlsWindow, (void*)(this));
    m_controlsWindow->when(FL_WHEN_NEVER);
    { m_controlsMenuBar = new Fl_Menu_Bar(0, 0, 395, 25);
      m_controlsMenuBar->menu(menu_m_controlsMenuBar);
    } // Fl_Menu_Bar* m_controlsMenuBar
    { m_controlsBrowser = new Fl_Browser(0, 25, 140, 300, "Controls");
      m_controlsBrowser->type(3);
      m_controlsBrowser->textsize(10);
      m_controlsBrowser->callback((Fl_Callback*)cb_m_controlsBrowser);
      Fl_Group::current()->resizable(m_controlsBrowser);
    } // Fl_Browser* m_controlsBrowser
    { m_controlsScroll = new Fl_Scroll(145, 25, 250, 300);
      m_controlsScroll->type(6);
      m_controlsScroll->when(FL_WHEN_CHANGED);
      { m_controlsPack = new Fl_Pack(145, 25, 225, 300);
        m_controlsPack->end();
      } // Fl_Pack* m_controlsPack
      m_controlsScroll->end();
    } // Fl_Scroll* m_controlsScroll
    m_controlsWindow->end();
  } // Fl_Double_Window* m_controlsWindow
  { m_modelerWindow = new Fl_Double_Window(340, 296, "Model");
    m_modelerWindow->callback((Fl_Callback*)cb_m_modelerWindow, (void*)(this));
    m_modelerWindow->when(FL_WHEN_NEVER);
    { m_modelerView = new ModelerView(0, 0, 340, 295, "ModelerView");
      m_modelerView->box(FL_NO_BOX);
      m_modelerView->color(FL_BACKGROUND_COLOR);
      m_modelerView->selection_color(FL_BACKGROUND_COLOR);
      m_modelerView->labeltype(FL_NORMAL_LABEL);
      m_modelerView->labelfont(0);
      m_modelerView->labelsize(14);
      m_modelerView->labelcolor(FL_FOREGROUND_COLOR);
      m_modelerView->align(Fl_Align(FL_ALIGN_CENTER));
      m_modelerView->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(m_modelerView);
    } // ModelerView* m_modelerView
    m_modelerWindow->end();
  } // Fl_Double_Window* m_modelerWindow
  m_nativeChooser = NULL;
}

void ModelerUserInterface::show() {
  m_controlsWindow->show();
  m_modelerWindow->show();
  m_modelerView->show();
}

const char* ModelerUserInterface::fileDialog(Fl_Native_File_Chooser::Type dialogType, const char* filter, const char* title) {
  //------------------------------------------------------------------------
  // This displays a modal file chooser with a native look-and-feel.
  // The available dialog types are:
  //   BROWSE_DIRECTORY       - Open a single directory
  //   BROWSE_FILE            - Open a single file
  //   BROWSE_MULTI_DIRECTORY - Open directories, allowing the user to
  //                            select more than one at a time
  //   BROWSE_MULTI_FILE      - Open files, allowing the user to select
  //                            more than one at a time
  //   BROWSE_SAVE_DIRECTORY  - Save a directory
  //   BROWSE_SAVE_FILE       - Save a file
  //
  // The filter limits the displayed files. See cb_load_image for an example.
  // title is optional, use NULL for the OS default title.
  // The return value is the filepath.
  //------------------------------------------------------------------------
  
  	if(!m_nativeChooser)
  		m_nativeChooser = new Fl_Native_File_Chooser(dialogType);
  	else
  		m_nativeChooser->type(dialogType);
  	m_nativeChooser->filter(filter);
  	m_nativeChooser->title(title);
  	int ret = m_nativeChooser->show();
  	if(ret == -1 ||	ret == 1) {
  		//error or cancel respectively
  		return NULL;
  	}
  	return m_nativeChooser->filename();
}

ModelerUserInterface::~ModelerUserInterface() {
  if(m_nativeChooser) delete m_nativeChooser;
}
